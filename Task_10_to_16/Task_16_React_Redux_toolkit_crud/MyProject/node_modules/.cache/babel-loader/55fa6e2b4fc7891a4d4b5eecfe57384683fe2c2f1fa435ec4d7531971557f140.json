{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Predefined initial state\nconst initialState = {\n  tasks: [{\n    id: 1,\n    name: 'siva',\n    organization: 'xyz',\n    email: 'x@gmail.com',\n    password: '123456',\n    numUsers: '1',\n    mobile: '9999988888',\n    country: 'India',\n    state: 'TN',\n    expireDays: '1',\n    photo: null\n  }, {\n    id: 2,\n    name: 'saran',\n    organization: 'abc',\n    email: 'y@gmail.com',\n    password: '654321',\n    numUsers: '1',\n    mobile: '9898989898',\n    country: 'India',\n    state: 'TN',\n    expireDays: '1',\n    photo: null\n  }] // Example states\n};\nconst registerSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {\n    // Add a new state\n    addTask: (state, action) => {\n      const newId = state.tasks.length > 0 ? Math.max(...state.tasks.map(task => task.id)) + 1 : 1;\n      state.tasks.push({\n        id: newId,\n        ...action.payload\n      });\n    },\n    // Edit an existing state\n    editTask: (state, action) => {\n      const index = state.tasks.findIndex(task => task.id === action.payload.id);\n      if (index >= 0) {\n        state.tasks[index] = {\n          ...state.tasks[index],\n          ...action.payload\n        }; // Merge updates\n      }\n    },\n    // Delete a state\n    deleteTask: (state, action) => {\n      state.tasks = state.tasks.filter(task => task.id !== action.payload);\n    },\n    // Load all states\n    loadTasks: (state, action) => {\n      state.tasks = action.payload;\n    }\n  }\n});\nexport const {\n  addTask,\n  editTask,\n  deleteTask,\n  loadTasks\n} = registerSlice.actions;\nexport default registerSlice.reducer; // Corrected this line","map":{"version":3,"names":["createSlice","initialState","tasks","id","name","organization","email","password","numUsers","mobile","country","state","expireDays","photo","registerSlice","reducers","addTask","action","newId","length","Math","max","map","task","push","payload","editTask","index","findIndex","deleteTask","filter","loadTasks","actions","reducer"],"sources":["C:/Users/Sivasaran/Desktop/Vamtec/Task_11_to_16/Task_16_React_Redux_toolkit_crud/MyProject/src/redux/registerSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// Predefined initial state\r\nconst initialState = {\r\n  tasks: [\r\n    {id: 1, name: 'siva', organization: 'xyz', email: 'x@gmail.com', password: '123456', numUsers: '1', mobile: '9999988888', country: 'India', state: 'TN', expireDays: '1', photo: null},\r\n    {id: 2, name: 'saran', organization: 'abc', email: 'y@gmail.com', password: '654321', numUsers: '1', mobile: '9898989898', country: 'India', state: 'TN', expireDays: '1', photo: null},\r\n  ], // Example states\r\n};\r\n\r\nconst registerSlice = createSlice({\r\n  name: \"register\",\r\n  initialState,\r\n  reducers: {\r\n    // Add a new state\r\n    addTask: (state, action) => {\r\n      const newId = state.tasks.length > 0 ? Math.max(...state.tasks.map((task) => task.id)) + 1 : 1;\r\n      state.tasks.push({ id: newId, ...action.payload });\r\n    },\r\n    // Edit an existing state\r\n    editTask: (state, action) => {\r\n      const index = state.tasks.findIndex((task) => task.id === action.payload.id);\r\n      if (index >= 0) {\r\n        state.tasks[index] = { ...state.tasks[index], ...action.payload }; // Merge updates\r\n      }\r\n    },\r\n    // Delete a state\r\n    deleteTask: (state, action) => {\r\n      state.tasks = state.tasks.filter((task) => task.id !== action.payload);\r\n    },\r\n    // Load all states\r\n    loadTasks: (state, action) => {\r\n      state.tasks = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTask, editTask, deleteTask, loadTasks } = registerSlice.actions;\r\nexport default registerSlice.reducer;  // Corrected this line\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CACL;IAACC,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,MAAM;IAAEC,YAAY,EAAE,KAAK;IAAEC,KAAK,EAAE,aAAa;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEC,MAAM,EAAE,YAAY;IAAEC,OAAO,EAAE,OAAO;IAAEC,KAAK,EAAE,IAAI;IAAEC,UAAU,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAI,CAAC,EACtL;IAACV,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,OAAO;IAAEC,YAAY,EAAE,KAAK;IAAEC,KAAK,EAAE,aAAa;IAAEC,QAAQ,EAAE,QAAQ;IAAEC,QAAQ,EAAE,GAAG;IAAEC,MAAM,EAAE,YAAY;IAAEC,OAAO,EAAE,OAAO;IAAEC,KAAK,EAAE,IAAI;IAAEC,UAAU,EAAE,GAAG;IAAEC,KAAK,EAAE;EAAI,CAAC,CACxL,CAAE;AACL,CAAC;AAED,MAAMC,aAAa,GAAGd,WAAW,CAAC;EAChCI,IAAI,EAAE,UAAU;EAChBH,YAAY;EACZc,QAAQ,EAAE;IACR;IACAC,OAAO,EAAEA,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC1B,MAAMC,KAAK,GAAGP,KAAK,CAACT,KAAK,CAACiB,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGV,KAAK,CAACT,KAAK,CAACoB,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACpB,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MAC9FQ,KAAK,CAACT,KAAK,CAACsB,IAAI,CAAC;QAAErB,EAAE,EAAEe,KAAK;QAAE,GAAGD,MAAM,CAACQ;MAAQ,CAAC,CAAC;IACpD,CAAC;IACD;IACAC,QAAQ,EAAEA,CAACf,KAAK,EAAEM,MAAM,KAAK;MAC3B,MAAMU,KAAK,GAAGhB,KAAK,CAACT,KAAK,CAAC0B,SAAS,CAAEL,IAAI,IAAKA,IAAI,CAACpB,EAAE,KAAKc,MAAM,CAACQ,OAAO,CAACtB,EAAE,CAAC;MAC5E,IAAIwB,KAAK,IAAI,CAAC,EAAE;QACdhB,KAAK,CAACT,KAAK,CAACyB,KAAK,CAAC,GAAG;UAAE,GAAGhB,KAAK,CAACT,KAAK,CAACyB,KAAK,CAAC;UAAE,GAAGV,MAAM,CAACQ;QAAQ,CAAC,CAAC,CAAC;MACrE;IACF,CAAC;IACD;IACAI,UAAU,EAAEA,CAAClB,KAAK,EAAEM,MAAM,KAAK;MAC7BN,KAAK,CAACT,KAAK,GAAGS,KAAK,CAACT,KAAK,CAAC4B,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACpB,EAAE,KAAKc,MAAM,CAACQ,OAAO,CAAC;IACxE,CAAC;IACD;IACAM,SAAS,EAAEA,CAACpB,KAAK,EAAEM,MAAM,KAAK;MAC5BN,KAAK,CAACT,KAAK,GAAGe,MAAM,CAACQ,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAET,OAAO;EAAEU,QAAQ;EAAEG,UAAU;EAAEE;AAAU,CAAC,GAAGjB,aAAa,CAACkB,OAAO;AACjF,eAAelB,aAAa,CAACmB,OAAO,CAAC,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}