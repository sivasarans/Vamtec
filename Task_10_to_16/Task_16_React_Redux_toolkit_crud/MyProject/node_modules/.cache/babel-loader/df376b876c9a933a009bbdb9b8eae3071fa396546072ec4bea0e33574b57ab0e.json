{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n\n// Predefined initial state\nconst initialState = {\n  tasks: [{\n    id: 1,\n    stateName: \"Tamil Nadu\",\n    country: \"India\"\n  }, {\n    id: 2,\n    stateName: \"California\",\n    country: \"United States\"\n  }] // Example states\n};\nconst stateSlice = createSlice({\n  name: \"state\",\n  initialState,\n  reducers: {\n    // CRUD Operations actioners\n    addTask: (x, action) => {\n      const newId = x.tasks.length > 0 ? Math.max(...x.tasks.map(task => task.id)) + 1 : 1;\n      x.tasks.push({\n        id: newId,\n        ...action.payload\n      });\n    },\n    editTask: (x, action) => {\n      const index = x.tasks.findIndex(task => task.id === action.payload.id);\n      if (index >= 0) {\n        x.tasks[index] = {\n          ...x.tasks[index],\n          ...action.payload\n        };\n      }\n    },\n    deleteTask: (x, action) => {\n      x.tasks = x.tasks.filter(task => task.id !== action.payload);\n    },\n    loadTasks: (x, action) => {\n      x.tasks = action.payload;\n    }\n  }\n});\nexport const {\n  addTask,\n  editTask,\n  deleteTask,\n  loadTasks\n} = stateSlice.actions;\nexport default stateSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","tasks","id","stateName","country","stateSlice","name","reducers","addTask","x","action","newId","length","Math","max","map","task","push","payload","editTask","index","findIndex","deleteTask","filter","loadTasks","actions","reducer"],"sources":["C:/Users/Sivasaran/Desktop/Vamtec/Task_11_to_16/Task_16_React_Redux_toolkit_crud/MyProject/src/redux/stateSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// Predefined initial state\r\nconst initialState = {\r\n  tasks: [\r\n    { id: 1, stateName: \"Tamil Nadu\", country: \"India\" },\r\n    { id: 2, stateName: \"California\", country: \"United States\" },\r\n  ], // Example states\r\n};\r\n\r\nconst stateSlice = createSlice({\r\n  name: \"state\",\r\n  initialState,\r\n  reducers: { // CRUD Operations actioners\r\n    addTask: (x, action) => {\r\n      const newId = x.tasks.length > 0 ? Math.max(...x.tasks.map((task) => task.id)) + 1 : 1;\r\n      x.tasks.push({ id: newId, ...action.payload })},\r\n    editTask: (x, action) => {\r\n      const index = x.tasks.findIndex((task) => task.id === action.payload.id);\r\n      if (index >= 0) { x.tasks[index] = { ...x.tasks[index], ...action.payload }}},\r\n    deleteTask: (x, action) => { x.tasks = x.tasks.filter((task) => task.id !== action.payload)},\r\n    loadTasks: (x, action) => { x.tasks = action.payload },},});\r\n\r\nexport const { addTask, editTask, deleteTask, loadTasks } = stateSlice.actions;\r\nexport default stateSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,CACL;IAAEC,EAAE,EAAE,CAAC;IAAEC,SAAS,EAAE,YAAY;IAAEC,OAAO,EAAE;EAAQ,CAAC,EACpD;IAAEF,EAAE,EAAE,CAAC;IAAEC,SAAS,EAAE,YAAY;IAAEC,OAAO,EAAE;EAAgB,CAAC,CAC7D,CAAE;AACL,CAAC;AAED,MAAMC,UAAU,GAAGN,WAAW,CAAC;EAC7BO,IAAI,EAAE,OAAO;EACbN,YAAY;EACZO,QAAQ,EAAE;IAAE;IACVC,OAAO,EAAEA,CAACC,CAAC,EAAEC,MAAM,KAAK;MACtB,MAAMC,KAAK,GAAGF,CAAC,CAACR,KAAK,CAACW,MAAM,GAAG,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGL,CAAC,CAACR,KAAK,CAACc,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACd,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MACtFO,CAAC,CAACR,KAAK,CAACgB,IAAI,CAAC;QAAEf,EAAE,EAAES,KAAK;QAAE,GAAGD,MAAM,CAACQ;MAAQ,CAAC,CAAC;IAAA,CAAC;IACjDC,QAAQ,EAAEA,CAACV,CAAC,EAAEC,MAAM,KAAK;MACvB,MAAMU,KAAK,GAAGX,CAAC,CAACR,KAAK,CAACoB,SAAS,CAAEL,IAAI,IAAKA,IAAI,CAACd,EAAE,KAAKQ,MAAM,CAACQ,OAAO,CAAChB,EAAE,CAAC;MACxE,IAAIkB,KAAK,IAAI,CAAC,EAAE;QAAEX,CAAC,CAACR,KAAK,CAACmB,KAAK,CAAC,GAAG;UAAE,GAAGX,CAAC,CAACR,KAAK,CAACmB,KAAK,CAAC;UAAE,GAAGV,MAAM,CAACQ;QAAQ,CAAC;MAAA;IAAC,CAAC;IAC/EI,UAAU,EAAEA,CAACb,CAAC,EAAEC,MAAM,KAAK;MAAED,CAAC,CAACR,KAAK,GAAGQ,CAAC,CAACR,KAAK,CAACsB,MAAM,CAAEP,IAAI,IAAKA,IAAI,CAACd,EAAE,KAAKQ,MAAM,CAACQ,OAAO,CAAC;IAAA,CAAC;IAC5FM,SAAS,EAAEA,CAACf,CAAC,EAAEC,MAAM,KAAK;MAAED,CAAC,CAACR,KAAK,GAAGS,MAAM,CAACQ,OAAO;IAAC;EAAE;AAAE,CAAC,CAAC;AAE/D,OAAO,MAAM;EAAEV,OAAO;EAAEW,QAAQ;EAAEG,UAAU;EAAEE;AAAU,CAAC,GAAGnB,UAAU,CAACoB,OAAO;AAC9E,eAAepB,UAAU,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}