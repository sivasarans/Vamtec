{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sivasaran\\\\Desktop\\\\Vamtec\\\\task9\\\\4 nov class based\\\\react-start-task\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Register from \"./components/Register\";\nimport Country from \"./components/Country\";\nimport State from \"./components/State\";\nimport ContextProvider from './components/ContextProvider';\nimport ConsumerComponent from './components/CustomerComponent';\nimport CustomerComponent from './components/CustomerComponent';\nimport { Change_Page } from \"./components/Page\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let dbx = null;\nfunction App() {\n  _s();\n  const {\n    displayPage,\n    setDisplayPage\n  } = useContext(Change_Page);\n  const display = () => {\n    if (displayPage == 'Register') {\n      return /*#__PURE__*/_jsxDEV(Register, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 14\n      }, this);\n    } else if (displayPage == 'Country') {\n      return /*#__PURE__*/_jsxDEV(Country, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 14\n      }, this);\n    } else if (displayPage == 'State') {\n      return /*#__PURE__*/_jsxDEV(State, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  useEffect(() => {\n    const x = indexedDB.open(\"ReactDemo!\", 1);\n    x.onupgradeneeded = e => {\n      dbx = e.target.result;\n      // Create object stores with 'id' as the keyPath\n      dbx.createObjectStore(\"register\", {\n        keyPath: \"id\",\n        autoIncrement: true\n      });\n      dbx.createObjectStore(\"country\", {\n        keyPath: \"id\",\n        autoIncrement: true\n      });\n      dbx.createObjectStore(\"state\", {\n        keyPath: \"id\",\n        autoIncrement: true\n      });\n    };\n    x.onsuccess = e => {\n      dbx = e.target.result;\n      console.log(\"db Initialized\");\n    };\n    x.onerror = e => {\n      console.log(\"db Error\", e.target.error);\n    };\n  }, []);\n  return (\n    // <Router future={{ v7_relativeSplatPath: true, v7_startTransition: true }}> {/* added \"future\" for console error */}\n    //       <Routes>\n    //       <Route path=\"/\" element={<Register/>}/> \n    //       <Route path=\"/register\" element={<Register />} /> {/* sample */}\n    //       <Route path=\"/country\" element={<Country />} />\n    //       <Route path=\"/state\" element={<State />} />\n    //       <Route path=\"/x1\" element={<ContextProvider />} />\n    //       <Route path=\"/x2\" element={<ConsumerComponent />} />\n    //       <Route path=\"/x3\" element={<CustomerComponent />} />\n\n    //       {/* <Route path=\"/Component\" element={<Component />} /> */}\n\n    //       </Routes>\n\n    // </Router>\n    display()\n  );\n}\n_s(App, \"yvbEp89O/9ltwia1Ooe1CR5HwcM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useContext","BrowserRouter","Router","Routes","Route","Register","Country","State","ContextProvider","ConsumerComponent","CustomerComponent","Change_Page","jsxDEV","_jsxDEV","dbx","App","_s","displayPage","setDisplayPage","display","fileName","_jsxFileName","lineNumber","columnNumber","x","indexedDB","open","onupgradeneeded","e","target","result","createObjectStore","keyPath","autoIncrement","onsuccess","console","log","onerror","error","_c","$RefreshReg$"],"sources":["C:/Users/Sivasaran/Desktop/Vamtec/task9/4 nov class based/react-start-task/src/App.js"],"sourcesContent":["import React ,{ useEffect, useState, useContext } from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Register from \"./components/Register\";\nimport Country from \"./components/Country\";\nimport State from \"./components/State\";\nimport ContextProvider from './components/ContextProvider';\nimport ConsumerComponent from './components/CustomerComponent';\nimport CustomerComponent from './components/CustomerComponent';\nimport { Change_Page } from \"./components/Page\";\n\n\n\n\n\nexport let dbx = null;\n\n\n\nfunction App() {\n  const {displayPage,setDisplayPage} = useContext(Change_Page);\n  const display = () =>{\n    if(displayPage == 'Register'){\n      return <Register />;\n    }else if(displayPage == 'Country' ){\n      return <Country />;\n     }else if(displayPage == 'State' ){\n      return <State />;\n     }\n  }\n\n  \n\n  \n\n\n  useEffect(()=>{\n    const x=indexedDB.open(\"ReactDemo!\",1);\n    x.onupgradeneeded = (e) => { \n      dbx = e.target.result;\n      // Create object stores with 'id' as the keyPath\n      dbx.createObjectStore(\"register\", { keyPath: \"id\", autoIncrement: true });\n      dbx.createObjectStore(\"country\", { keyPath: \"id\", autoIncrement: true });\n      dbx.createObjectStore(\"state\", { keyPath: \"id\", autoIncrement: true });\n  };\n  \n    x.onsuccess = (e) => {       dbx = e.target.result;      console.log(\"db Initialized\");}\n    x.onerror = (e) => {console.log(\"db Error\",e.target.error);}},[]);\n\n  return (\n    // <Router future={{ v7_relativeSplatPath: true, v7_startTransition: true }}> {/* added \"future\" for console error */}\n    //       <Routes>\n    //       <Route path=\"/\" element={<Register/>}/> \n    //       <Route path=\"/register\" element={<Register />} /> {/* sample */}\n    //       <Route path=\"/country\" element={<Country />} />\n    //       <Route path=\"/state\" element={<State />} />\n    //       <Route path=\"/x1\" element={<ContextProvider />} />\n    //       <Route path=\"/x2\" element={<ConsumerComponent />} />\n    //       <Route path=\"/x3\" element={<CustomerComponent />} />\n\n    //       {/* <Route path=\"/Component\" element={<Component />} /> */}\n\n\n    //       </Routes>\n\n    // </Router>\n    display()\n\n\n\n  );\n}\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,eAAe,MAAM,8BAA8B;AAC1D,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,SAASC,WAAW,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMhD,OAAO,IAAIC,GAAG,GAAG,IAAI;AAIrB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM;IAACC,WAAW;IAACC;EAAc,CAAC,GAAGlB,UAAU,CAACW,WAAW,CAAC;EAC5D,MAAMQ,OAAO,GAAGA,CAAA,KAAK;IACnB,IAAGF,WAAW,IAAI,UAAU,EAAC;MAC3B,oBAAOJ,OAAA,CAACR,QAAQ;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACrB,CAAC,MAAK,IAAGN,WAAW,IAAI,SAAS,EAAE;MACjC,oBAAOJ,OAAA,CAACP,OAAO;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACnB,CAAC,MAAK,IAAGN,WAAW,IAAI,OAAO,EAAE;MAChC,oBAAOJ,OAAA,CAACN,KAAK;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IACjB;EACH,CAAC;EAODzB,SAAS,CAAC,MAAI;IACZ,MAAM0B,CAAC,GAACC,SAAS,CAACC,IAAI,CAAC,YAAY,EAAC,CAAC,CAAC;IACtCF,CAAC,CAACG,eAAe,GAAIC,CAAC,IAAK;MACzBd,GAAG,GAAGc,CAAC,CAACC,MAAM,CAACC,MAAM;MACrB;MACAhB,GAAG,CAACiB,iBAAiB,CAAC,UAAU,EAAE;QAAEC,OAAO,EAAE,IAAI;QAAEC,aAAa,EAAE;MAAK,CAAC,CAAC;MACzEnB,GAAG,CAACiB,iBAAiB,CAAC,SAAS,EAAE;QAAEC,OAAO,EAAE,IAAI;QAAEC,aAAa,EAAE;MAAK,CAAC,CAAC;MACxEnB,GAAG,CAACiB,iBAAiB,CAAC,OAAO,EAAE;QAAEC,OAAO,EAAE,IAAI;QAAEC,aAAa,EAAE;MAAK,CAAC,CAAC;IAC1E,CAAC;IAECT,CAAC,CAACU,SAAS,GAAIN,CAAC,IAAK;MAAQd,GAAG,GAAGc,CAAC,CAACC,MAAM,CAACC,MAAM;MAAOK,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAAC,CAAC;IACxFZ,CAAC,CAACa,OAAO,GAAIT,CAAC,IAAK;MAACO,OAAO,CAACC,GAAG,CAAC,UAAU,EAACR,CAAC,CAACC,MAAM,CAACS,KAAK,CAAC;IAAC,CAAC;EAAA,CAAC,EAAC,EAAE,CAAC;EAEnE;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;;IAGA;;IAEA;IACAnB,OAAO,CAAC;EAAC;AAKb;AAACH,EAAA,CApDQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAqDZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}