{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sivasaran\\\\Desktop\\\\Vamtec\\\\task10 10nov2024\\\\React PG CONNECTION\\\\src\\\\components\\\\Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [countries, setCountries] = useState([]); // To store the list of countries\n  const [selectedCountry, setSelectedCountry] = useState(''); // To store selected country\n  const [states, setStates] = useState([]); // To store states based on selected country\n  const [error, setError] = useState(null);\n\n  // Fetch the list of countries when the component mounts\n  // useEffect(() => {\n  //   const fetchCountries = async () => {\n  //     try {\n  //       const response = await fetch('http://localhost:5000/countries');\n  //       const data = await response.json();\n  //       setCountries(data);  // Set countries to the state\n  //     } catch (err) {\n  //       console.error('Error fetching countries:', err);\n  //     }\n  //   };\n  //   fetchCountries();\n  // }, []);\n\n  // Fetch the states based on the selected country\n  const fetchStates = async countryName => {\n    if (!countryName) return; // If no country is selected, don't fetch states\n\n    try {\n      const response = await fetch(`http://localhost:5000/fetchStateBy/${countryName}`);\n      const data = await response.json();\n      setStates(data); // Set states to the state\n      setError(null); // Clear any previous errors\n    } catch (err) {\n      console.error('Error fetching states:', err);\n      setError('No states found for the selected country.');\n      setStates([]); // Clear states if there's an error\n    }\n  };\n\n  // Handle the country selection change\n  const handleCountryChange = event => {\n    const countryName = event.target.value;\n    setSelectedCountry(countryName);\n    fetchStates(countryName); // Fetch states when country is selected\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Country: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: handleCountryChange,\n        value: selectedCountry,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country.country_name,\n          children: country.country_name\n        }, country.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select State: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), states.length > 0 ? states.map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: state.state_name,\n          children: state.state_name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"No states available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"vX6gdt17q7jHqbAgtFGI+nT8crA=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Register","_s","countries","setCountries","selectedCountry","setSelectedCountry","states","setStates","error","setError","fetchStates","countryName","response","fetch","data","json","err","console","handleCountryChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","country","country_name","id","length","state","index","state_name","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Sivasaran/Desktop/Vamtec/task10 10nov2024/React PG CONNECTION/src/components/Register.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Register = () => {\r\n  const [countries, setCountries] = useState([]);  // To store the list of countries\r\n  const [selectedCountry, setSelectedCountry] = useState('');  // To store selected country\r\n  const [states, setStates] = useState([]);  // To store states based on selected country\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch the list of countries when the component mounts\r\n  // useEffect(() => {\r\n  //   const fetchCountries = async () => {\r\n  //     try {\r\n  //       const response = await fetch('http://localhost:5000/countries');\r\n  //       const data = await response.json();\r\n  //       setCountries(data);  // Set countries to the state\r\n  //     } catch (err) {\r\n  //       console.error('Error fetching countries:', err);\r\n  //     }\r\n  //   };\r\n  //   fetchCountries();\r\n  // }, []);\r\n\r\n  // Fetch the states based on the selected country\r\n  const fetchStates = async (countryName) => {\r\n    if (!countryName) return; // If no country is selected, don't fetch states\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/fetchStateBy/${countryName}`);\r\n      const data = await response.json();\r\n      setStates(data);  // Set states to the state\r\n      setError(null);  // Clear any previous errors\r\n    } catch (err) {\r\n      console.error('Error fetching states:', err);\r\n      setError('No states found for the selected country.');\r\n      setStates([]);  // Clear states if there's an error\r\n    }\r\n  };\r\n\r\n  // Handle the country selection change\r\n  const handleCountryChange = (event) => {\r\n    const countryName = event.target.value;\r\n    setSelectedCountry(countryName);\r\n    fetchStates(countryName);  // Fetch states when country is selected\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Register</h1>\r\n\r\n      {/* Country Dropdown */}\r\n      <div>\r\n        <label>Select Country: </label>\r\n        <select onChange={handleCountryChange} value={selectedCountry}>\r\n          <option value=\"\">Select a Country</option>\r\n          {countries.map((country) => (\r\n            <option key={country.id} value={country.country_name}>\r\n              {country.country_name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {/* State Dropdown */}\r\n      {selectedCountry && (\r\n        <div>\r\n          <label>Select State: </label>\r\n          <select>\r\n            <option value=\"\">Select a State</option>\r\n            {states.length > 0 ? (\r\n              states.map((state, index) => (\r\n                <option key={index} value={state.state_name}>\r\n                  {state.state_name}\r\n                </option>\r\n              ))\r\n            ) : (\r\n              <option>No states available</option>\r\n            )}\r\n          </select>\r\n        </div>\r\n      )}\r\n\r\n      {/* Display error message if any */}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}