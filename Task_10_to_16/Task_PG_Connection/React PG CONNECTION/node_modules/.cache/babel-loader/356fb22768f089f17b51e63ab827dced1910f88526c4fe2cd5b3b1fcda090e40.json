{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sivasaran\\\\Desktop\\\\Vamtec\\\\task10 10nov2024\\\\React PG CONNECTION\\\\src\\\\components\\\\Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [states, setStates] = useState([]); // Default to an empty array\n  const [selectedCountry, setSelectedCountry] = useState('');\n\n  // Fetch countries on component mount\n  useEffect(() => {\n    const fetchCountries = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/countries');\n        const data = await response.json();\n        setCountries(data);\n      } catch (err) {\n        console.error('Error fetching countries:', err);\n      }\n    };\n    fetchCountries();\n  }, []);\n\n  // Fetch states based on selected country\n  useEffect(() => {\n    if (selectedCountry) {\n      const fetchStates = async () => {\n        try {\n          const response = await fetch(`http://localhost:5000/countries/states/${selectedCountry}`);\n          const data = await response.json();\n          setStates(data);\n        } catch (err) {\n          console.error('Error fetching states:', err);\n        }\n      };\n      fetchStates();\n    } else {\n      setStates([]); // Reset states if no country is selected\n    }\n  }, [selectedCountry]); // Re-run the effect whenever the selected country changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Select Country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Country: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCountry,\n        onChange: e => setSelectedCountry(e.target.value) // Update selectedCountry on change\n        ,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), countries.map((country, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country.country_name,\n          children: country.country_name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), selectedCountry && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"State: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select a State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), states.map((state, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: state.state_name,\n          children: state.state_name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"dlsURZL7ikiI4vpncxYRHM8sSJQ=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Register","_s","countries","setCountries","states","setStates","selectedCountry","setSelectedCountry","fetchCountries","response","fetch","data","json","err","console","error","fetchStates","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","map","country","index","country_name","state","state_name","_c","$RefreshReg$"],"sources":["C:/Users/Sivasaran/Desktop/Vamtec/task10 10nov2024/React PG CONNECTION/src/components/Register.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Register = () => {\r\n  const [countries, setCountries] = useState([]);\r\n  const [states, setStates] = useState([]); // Default to an empty array\r\n  const [selectedCountry, setSelectedCountry] = useState('');\r\n  \r\n  // Fetch countries on component mount\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/countries');\r\n        const data = await response.json();\r\n        setCountries(data);\r\n      } catch (err) {\r\n        console.error('Error fetching countries:', err);\r\n      }\r\n    };\r\n    fetchCountries();\r\n  }, []);\r\n  \r\n  // Fetch states based on selected country\r\n  useEffect(() => {\r\n    if (selectedCountry) {\r\n      const fetchStates = async () => {\r\n        try {\r\n          const response = await fetch(`http://localhost:5000/countries/states/${selectedCountry}`);\r\n          const data = await response.json();\r\n          setStates(data);\r\n        } catch (err) {\r\n          console.error('Error fetching states:', err);\r\n        }\r\n      };\r\n      fetchStates();\r\n    } else {\r\n      setStates([]); // Reset states if no country is selected\r\n    }\r\n  }, [selectedCountry]); // Re-run the effect whenever the selected country changes\r\n\r\n  return (\r\n    <div>\r\n      <h1>Select Country</h1>\r\n      <div>\r\n        <label>Country: </label>\r\n        <select\r\n          value={selectedCountry}\r\n          onChange={(e) => setSelectedCountry(e.target.value)} // Update selectedCountry on change\r\n        >\r\n          <option value=\"\">Select a Country</option>\r\n          {countries.map((country, index) => (\r\n            <option key={index} value={country.country_name}>\r\n              {country.country_name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      {selectedCountry && (\r\n        <div>\r\n          <label>State: </label>\r\n          <select>\r\n            <option value=\"\">Select a State</option>\r\n            {states.map((state, index) => (\r\n              <option key={index} value={state.state_name}>\r\n                {state.state_name}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}